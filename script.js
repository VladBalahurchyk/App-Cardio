'use strict'

const form = document.querySelector('.form')
const containerWorkouts = document.querySelector('.workouts')
const deletionDataBtn = document.querySelector('.workout__deletion-data-btn')
const inputType = document.querySelector('.form__input--type')
const inputDistance = document.querySelector('.form__input--distance')
const inputDuration = document.querySelector('.form__input--duration')
const inputTemp = document.querySelector('.form__input--temp')
const inputClimb = document.querySelector('.form__input--climb')
const createWorkoutHint = document.querySelector('.workout-hint')
const workoutOptionsBtn = document.querySelector('.workout__options')
const alertWindow = document.querySelector('.alert-window')
const alertWindowBtns = document.querySelector('.alert-window__btns')
const overlay = document.querySelector('.overlay')

//---------–ö–ª–∞—Å–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å-----------------------
class Workout {
  date = new Date()
  id = (Date.now() + '').slice(-10)

  constructor(distance, duration, coords) {
    this.distance = distance
    this.duration = duration
    this.coords = coords
  }
  _setDescription() {
    this.description =
      this.name === 'running'
        ? `–ü—Ä–æ–±–µ–∂–∫–∞ ${new Intl.DateTimeFormat('uk-UA').format(this.date)}`
        : `–í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${new Intl.DateTimeFormat('uk-UA').format(this.date)}`
  }
}

class Running extends Workout {
  name = 'running'
  constructor(distance, duration, coords, temp) {
    super(distance, duration, coords)
    this.temp = temp
    this.calculatePace()
    this._setDescription()
  }

  calculatePace() {
    this.pace = this.duration / this.distance
  }
}

class Cycling extends Workout {
  name = 'cycling'
  constructor(distance, duration, coords, climb) {
    super(distance, duration, coords)
    this.climb = climb
    this.calculateSpeed()
    this._setDescription()
  }

  calculateSpeed() {
    this.speed = this.distance / (this.duration / 60)
  }
}

//---------–ö–ª–∞—Å –∑ —É—Å—ñ—î—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–Ω—ñ—Å—Ç—é –¥–æ–¥–∞—Ç–∫–∞-----------------------
class App {
  #map
  #mapEvent
  #workouts = []
  currentWorkout

  constructor() {
    // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this._getPosition()

    // –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ locale storage
    this._getDataFromLocalStorage()

    form.addEventListener('submit', this._newWorkout.bind(this))

    inputType.addEventListener('change', this._toggleClimdField)

    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this))

    deletionDataBtn.addEventListener('click', this._alertAndFuncOfAlertWindow.bind(this))

    overlay.addEventListener('click', this._onClickOverlayFunctionality.bind(this))
  }

  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function () {
        alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è')
      })
    }
  }
  _loadMap(position) {
    const { latitude, longitude } = position.coords
    this.#map = L.map('map').setView([latitude, longitude], 13)

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map)

    //–¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π (–∫–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—ñ)
    this.#map.addEventListener('click', this._showForm.bind(this))

    // –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç–æ –¥–∞–Ω—ñ –∑ local storage –Ω–∞ –∫–∞—Ä—Ç—ñ
    this.#workouts.forEach(workout => this._displayWorkoutOnMap(workout))
  }

  _showForm(event) {
    this.#mapEvent = event
    form.classList.remove('hidden')
    inputDistance.focus()

    // —Ö–æ–≤–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if (!createWorkoutHint.classList.contains('hidden')) createWorkoutHint.classList.add('hidden')
  }

  _hideForm() {
    form.classList.add('hidden')
    inputDistance.value = inputDuration.value = inputTemp.value = inputClimb.value = ''
  }

  _toggleClimdField() {
    inputClimb.closest('.form__row').classList.toggle('form__row--hidden')
    inputTemp.closest('.form__row').classList.toggle('form__row--hidden')
  }

  _isInputValid(typeOfWorkout, ...values) {
    const areNumbers = values.every(numb => Number.isFinite(numb))
    let areNumbersPositive

    if (typeOfWorkout === 'running') {
      areNumbersPositive = values.every(numb => numb > 0)
    }
    // —è–∫—â–æ —Ü–µ 'cycling' —Ç—Ä–µ–±–∞ –≤–∏–∫–ª—é—á–∏—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ limb
    if (typeOfWorkout === 'cycling') {
      const valuesWithoutClimb = values.slice(0, 2)
      areNumbersPositive = valuesWithoutClimb.every(numb => numb > 0)
    }

    return areNumbers && areNumbersPositive
  }

  _newWorkout(e) {
    e.preventDefault()
    const { lat, lng } = this.#mapEvent.latlng

    // –∑—á–∏—Ç—É—î–º–æ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ —Ñ–æ—Ä–º–∏
    const type = inputType.value
    const distance = +inputDistance.value
    const duration = +inputDuration.value

    let workout

    if (type === 'running') {
      const temp = +inputTemp.value

      // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–Ω–∏—Ö –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
      if (!this._isInputValid(type, distance, duration, temp)) return this._alertAndFuncOfAlertWindow(e)

      // —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - –±—ñ–≥
      workout = new Running(distance, duration, [lat, lng], temp)
    }

    if (type === 'cycling') {
      const climb = +inputClimb.value

      // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–Ω–∏—Ö –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
      if (!this._isInputValid(type, distance, duration, climb)) return this._alertAndFuncOfAlertWindow(e)

      // —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è - –≤–µ–ª–æ-—ó–∑–¥–∞
      workout = new Cycling(distance, duration, [lat, lng], climb)
    }

    // –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –º–∞—Å–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    this.#workouts.push(workout)

    //–≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ
    this._displayWorkoutOnMap(workout)

    // –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É
    this._displayWorkoutOnSidebar(workout)

    //–æ—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ —Å—Ö–æ–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É
    this._hideForm()

    // –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Å–∏–≤–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤ localStorage
    this._saveDataOnLocalStorage()

    // –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
    deletionDataBtn.classList.remove('hidden')
  }

  _displayWorkoutOnMap(workout) {
    workout.marker = new L.Marker(workout.coords, { draggable: false })
    this.#map.addLayer(workout.marker)
    workout.marker
      .bindPopup(
        L.popup({
          maxWidth: 220,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.name}-popup`,
        })
      )
      .setPopupContent(`${workout.name === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'} ${workout.description} `)
      .openPopup()
  }

  _removeWorkoutFromMap(workout) {
    if (!workout) return
    this.#map.removeLayer(workout.marker)
  }

  _displayWorkoutOnSidebar(workout) {
    let html = `
      <li class="workout workout--${workout.name}" data-id=${workout.id}>
          <h2 class="workout__title">${workout.description}</h2>
          <div class="workout__details">
            <span class="workout__icon">${workout.name === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'}</span>
            <span class="workout__value">${workout.distance}</span>
            <form>
               <input type='number' class='workout__input' value='${workout.distance}'></input>
            </form>
            <span class="workout__unit">–∫–º</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚è±</span>
            <span class="workout__value">${workout.duration}</span>
            <form>
               <input type='number' class='workout__input' value='${workout.duration}'></input>
            </form>
            <span class="workout__unit">–º–∏–Ω</span>
          </div>
         `
    if (workout.name === 'running') {
      html += `
         <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value">${workout.pace.toFixed(2)}</span>
            <span class='workout__value--—Åannot-edit'>‚Äî‚Äî‚Äî</span>
            <span class="workout__unit">–º–∏–Ω/–∫–º</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üëü‚è±</span>
            <span class="workout__value">${workout.temp}</span>
            <form>
               <input type='number' class='workout__input' value='${workout.temp}'></input>
            </form>
            <span class="workout__unit">—à–∞–≥/–º–∏–Ω</span>
          </div>
         `
    }
    if (workout.name === 'cycling') {
      html += `
         <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value">${workout.speed.toFixed(2)}</span>
            <span class='workout__value--—Åannot-edit'>‚Äî‚Äî‚Äî</span>
            <span class="workout__unit">–∫–º/—á</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üèî</span>
            <span class="workout__value">${workout.climb}</span>
            <form>
               <input type='number' class='workout__input' value='${workout.climb}'></input>
            </form>
            <span class="workout__unit">–º</span>
          </div>
         `
    }
    html += `
      <div class="workout__options"></div>
      <div class="workout__btns hidden">
      <button class="workout__btn workout__btn--edit">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
      <button class="workout__btn workout__btn--delete">–£–¥–∞–ª–∏—Ç—å</button> 
      </div>
      </li> 
      `
    form.insertAdjacentHTML('afterend', html)

    // –∫–Ω–æ–ø–∫–∞ –æ–ø—Ü—ñ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ —ó—ó –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π
    const workoutOptionsBtn = document.querySelector('.workout__options')
    workoutOptionsBtn.addEventListener('click', this._openOrCloseSettingsOfWorkout)

    // –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ–π –¥–æ –∫–Ω–æ–ø–æ–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    document.querySelector('.workout').addEventListener('click', this._functionalityOfWorkoutButtons.bind(this))
  }

  _moveToWorkout(e) {
    const workoutInListWorkouts = e.target.closest('.workout')
    if (!workoutInListWorkouts) return
    const workoutId = workoutInListWorkouts.dataset.id
    const workout = this.#workouts.find(item => item.id === workoutId)
    this.#map.setView(workout.coords, 13, {
      animate: true,
      pan: { duration: 1 },
    })
  }

  _saveDataOnLocalStorage() {
    // –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –≤–∏–ª—É—á–∞—î–º–æ marker-s (—ó—Ö –Ω–µ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ "circular structure")
    const workoutsWithoutMarkers = this.#workouts.map(w => (({ marker, ...rest }) => rest)(w))

    localStorage.setItem('workouts', JSON.stringify(workoutsWithoutMarkers))
  }

  _getDataFromLocalStorage() {
    const data = JSON.parse(localStorage.getItem('workouts'))

    // —è–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç–∞ data –Ω–µ —ñ—Å–Ω—É—î
    if (!data) {
      createWorkoutHint.classList.remove('hidden')
      return
    }
    // —è–∫—â–æ —î —Ö–æ—á –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç –≤ data
    data[0] ? deletionDataBtn.classList.remove('hidden') : createWorkoutHint.classList.remove('hidden')

    this.#workouts = data

    //–≤—ñ–¥—Ä–∞–∂–∞—î—Ç–æ –¥–∞–Ω—ñ –∑ local storage –≤ —Å–∞–π—Ç–±–∞—Ä—ñ
    this.#workouts.forEach(workout => this._displayWorkoutOnSidebar(workout))
  }

  _openOrCloseSettingsOfWorkout(e) {
    const workoutInListWorkouts = e.target.closest('.workout')
    workoutInListWorkouts.querySelector('.workout__btns').classList.toggle('hidden')
  }

  _toggleWorkoutButtons(btn1, btn2) {
    const btn = this.currentWorkout.querySelector(`.workout__btn--${btn1}`)
    btn.textContent =
      btn2 === 'cancel' ? '–û—Ç–º–µ–Ω–∞' : btn2 === 'edit' ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å' : btn2 === 'confirm' ? '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' : '–£–¥–∞–ª–∏—Ç—å'
    btn.classList.add(`workout__btn--${btn2}`)
    btn.classList.remove(`workout__btn--${btn1}`)
  }

  _functionalityOfWorkoutButtons(e) {
    const clickedButton = e.target
    // –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –∑ —è–∫–∏–º –ø—Ä–∞—Ü—é—î–º–æ
    this.currentWorkout = clickedButton.closest('.workout')

    if (!clickedButton.classList.contains('workout__btn')) return

    // --------------–Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–£–î–ê–õ–ò–¢–¨"--------------------
    if (clickedButton.classList.contains('workout__btn--delete')) {
      this._alertAndFuncOfAlertWindow(e)
    }

    //-----------------–Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨"---------------
    if (clickedButton.classList.contains('workout__btn--edit')) {
      this.currentWorkout.classList.add('workout--edit')
      overlay.classList.remove('hidden')

      // –∑ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
      this._toggleWorkoutButtons('edit', 'cancel')

      // –∑ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
      this._toggleWorkoutButtons('delete', 'confirm')

      this.currentWorkout.querySelector('.workout__input').focus()

      return
    }

    const nodeListOfInputs = this.currentWorkout.querySelectorAll('.workout__input')
    const nodeListOfValues = this.currentWorkout.querySelectorAll('.workout__value')

    //--------–Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–û–¢–ú–ï–ù–ê"--------------------
    if (clickedButton.classList.contains('workout__btn--cancel')) {
      this._funcOf–°ancelEditWorkoutBtn.call(this)
      overlay.classList.add('hidden')

      //–≤ input-–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
      nodeListOfInputs[0].value = nodeListOfValues[0].textContent
      nodeListOfInputs[1].value = nodeListOfValues[1].textContent
      nodeListOfInputs[2].value = nodeListOfValues[3].textContent
    }

    //-------–Ω–∞—Ç–∏—Å–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨"--------------------
    if (clickedButton.classList.contains('workout__btn--confirm')) {
      // –≤–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –¥–∞–Ω–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —î –±—ñ–≥–æ–º
      const isWorkoutTypeRunning = this.currentWorkout.classList.contains('workout--running')

      // –∑—á–∏—Ç—É—ç–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ input-—ñ–≤
      const distance = +nodeListOfInputs[0].value
      const duration = +nodeListOfInputs[1].value
      const paceOrSpeed = isWorkoutTypeRunning ? duration / distance : distance / (duration / 60)
      const tempOrClimb = +nodeListOfInputs[2].value

      // –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
      const type = isWorkoutTypeRunning ? 'running' : 'cycling'

      if (!this._isInputValid(type, distance, duration, tempOrClimb)) {
        this._alertAndFuncOfAlertWindow(e)
        this.currentWorkout.style.zIndex = 'auto'
        return
      }

      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ input-—ñ–≤ –≤ value
      nodeListOfValues[0].textContent = distance
      nodeListOfValues[1].textContent = duration
      nodeListOfValues[2].textContent = paceOrSpeed.toFixed(2)
      nodeListOfValues[3].textContent = tempOrClimb

      // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –º–∞—Å–∏–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å —ñ –æ–Ω–æ–≤–ª—é—î–º–æ localStorage
      const workoutId = this.currentWorkout.dataset.id
      const workoutInArray = this.#workouts.find(w => w.id == workoutId)
      workoutInArray.distance = distance
      workoutInArray.duration = duration
      workoutInArray[isWorkoutTypeRunning ? 'pace' : 'speed'] = paceOrSpeed
      workoutInArray[isWorkoutTypeRunning ? 'temp' : 'climb'] = tempOrClimb

      this._saveDataOnLocalStorage()

      // –∑ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
      this._toggleWorkoutButtons('cancel', 'edit')

      // –∑ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
      this._toggleWorkoutButtons('confirm', 'delete')

      this.currentWorkout.classList.remove('workout--edit')
      overlay.classList.add('hidden')
    }
  }

  _funcOf–°ancelEditWorkoutBtn() {
    this.currentWorkout.classList.remove('workout--edit')

    // –∑ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    this._toggleWorkoutButtons('cancel', 'edit')

    // –∑ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" —Ä–æ–±–∏–º–æ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    this._toggleWorkoutButtons('confirm', 'delete')
  }

  _showAlertWindow() {
    alertWindow.classList.remove('hidden')
    overlay.classList.remove('hidden')
  }

  _hideAlertWindow() {
    alertWindow.classList.add('hidden')
    overlay.classList.add('hidden')
  }

  _onClickOverlayFunctionality() {
    // –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ OVERLAY –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ–º—É AlertWindow
    if (
      this.currentWorkout &&
      this.currentWorkout.classList.contains('workout--edit') &&
      !alertWindow.classList.contains('hidden')
    ) {
      this._hideAlertWindowAndShowWorkout.call(this)
      return
    }

    // –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ OVERLAY –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–∞–Ω–∞–ª–æ–≥—ñ—á–Ω–æ –¥–æ "–û—Ç–º–µ–Ω–∞")
    if (
      this.currentWorkout &&
      this.currentWorkout.classList.contains('workout--edit') &&
      alertWindow.classList.contains('hidden')
    ) {
      this._funcOf–°ancelEditWorkoutBtn.call(this)
    }

    // –≤—Å—ñ —ñ–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏
    this._hideAlertWindow()
  }

  _hideAlertWindowAndShowWorkout() {
    this.currentWorkout.style.zIndex = '101'
    alertWindow.classList.add('hidden')
  }

  _alertAndFuncOfAlertWindow(e) {
    // –∫–æ–Ω—Ç–µ–Ω—Ç —ñ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞:
    const alertWindowContent = alertWindow.querySelector('.alert-window__content')
    const isTargetBtnDelete = e.target.classList.contains('workout__btn--delete')
    const isTargetBtnConfirm = e.target.classList.contains('workout__btn--confirm')

    // –∫–Ω–æ–ø–∫–∞ "–£–î–ê–õ–ò–¢–¨ –í–°–ï –¢–†–ï–ù–ò–†–û–í–ö–ò"
    if (e.target === deletionDataBtn) {
      alertWindowContent.textContent = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?'
      alertWindowBtns.addEventListener('click', this._continueOrCancelDeletionData.bind(this), { once: true })
    }

    // –∫–Ω–æ–ø–∫–∞ "–£–î–ê–õ–ò–¢–¨" —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if (isTargetBtnDelete) {
      alertWindowContent.textContent = '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?'
      alertWindowBtns.addEventListener('click', this._continueOrCancelDeletionWorkout.bind(this), { once: true })
    }
    alertWindowBtns.innerHTML = `<button class="alert-window__btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
    <button class="alert-window__btn btn-continue">–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å</button>`

    // –∫–Ω–æ–ø–∫–∞ "–û–ö" –≤ —Ñ–æ—Ä–º—ñ –∞–±–æ –∫–Ω–æ–ø–∫–∞ "–ü–û–î–¢–í–ï–†–î–ò–¢–¨" –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if (e.target === form || isTargetBtnConfirm) {
      alertWindowContent.textContent = '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞!'
      alertWindowBtns.innerHTML = `<button class="alert-window__btn btn-ok">OK</button>`

      isTargetBtnConfirm
        ? alertWindowBtns.addEventListener('click', this._hideAlertWindowAndShowWorkout.bind(this), { once: true })
        : alertWindowBtns.addEventListener('click', this._hideAlertWindow, { once: true })
    }
    // –≤–∏–≤–æ–¥–∏–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂—É–≤–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ:
    this._showAlertWindow()
  }

  _continueOrCancelDeletionWorkout(e) {
    const clickBtn = e.target

    // –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
    if (clickBtn.classList.contains('btn-continue')) {
      const workoutId = this.currentWorkout.dataset.id

      const workoutInArrayWorkouts = this.#workouts.find(w => w.id === workoutId)
      this._removeWorkoutFromMap(workoutInArrayWorkouts)

      this.#workouts = this.#workouts.filter(item => item.id !== workoutId)
      this.currentWorkout.remove()
      if (!this.#workouts[0]) {
        deletionDataBtn.classList.add('hidden')
        createWorkoutHint.classList.remove('hidden')
      }
      this._saveDataOnLocalStorage()
    }

    this._hideAlertWindow()
  }

  _continueOrCancelDeletionData(e) {
    const clickBtn = e.target

    // –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
    if (clickBtn.classList.contains('btn-continue')) {
      localStorage.removeItem('workouts')
      location.reload()
    }
    // –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏
    if (clickBtn.classList.contains('btn-cancel')) {
      this._hideAlertWindow()
    }
  }
}
const app = new App()
